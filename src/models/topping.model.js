const { Schema, model } = require("mongoose"); // Erase if already required
const { toJSON, paginate } = require("./plugins");

// Declare the Schema of the Mongo model
const toppingSchema = new Schema(
  {
    name: {
      type: String,
      required: true,
      trim: true,
    },
    price: {
      type: Number,
      required: true,
      min: 0,
    },
    isAvailable: {
      type: Boolean,
      default: true,
    },
  },
  {
    timestamps: true,
    collection: "toppings",
  }
);

// * √Åp d·ª•ng c√°c plugin
toppingSchema.plugin(toJSON);
toppingSchema.plugin(paginate);

// üëâ B·ªî SUNG: Index duy nh·∫•t kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng (ƒë√°ng tin c·∫≠y h∆°n unique: true)
// X√≥a index c≈© n·∫øu c√≥ v√† th√™m index n√†y
toppingSchema.index(
  { name: 1 },
  { unique: true, collation: { locale: "en", strength: 2 } }
);

/**
 * Static method ƒë·ªÉ ki·ªÉm tra t√™n topping ƒë√£ t·ªìn t·∫°i ch∆∞a
 * @param {string} name - T√™n topping
 * @param {ObjectId} [excludeToppingId] - Id c·ªßa topping c·∫ßn lo·∫°i tr·ª´ (khi update)
 * @returns {Promise<boolean>}
 */
toppingSchema.statics.isNameTaken = async function (name, excludeToppingId) {
  // üëâ B·ªî SUNG: D√πng Case-Insensitive Regex (Case-Insensitive Check)
  const trimmedName = name.trim();
  const topping = await this.findOne({
    name: { $regex: new RegExp(`^${trimmedName}$`, "i") }, // T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng
    _id: { $ne: excludeToppingId },
  });
  return !!topping; // Tr·∫£ v·ªÅ true n·∫øu document ƒë∆∞·ª£c t√¨m th·∫•y, false n·∫øu kh√¥ng.
};

// Export the model
module.exports = model("Topping", toppingSchema);
